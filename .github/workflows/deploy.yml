name: Deploy to AWS CodeDeploy (no third-party actions)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      S3_BUCKET:  ${{ vars.S3_BUCKET }}
      S3_PREFIX:  ${{ vars.S3_PREFIX }} # optional
      APP_NAME:   ${{ vars.CODEDEPLOY_APPLICATION }}
      DG_NAME:    ${{ vars.CODEDEPLOY_DEPLOYMENT_GROUP }}
      # These come from repo secrets you created
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Clone repository (no checkout action)
        run: |
          git clone "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" .
          git checkout "${{ github.sha }}"
          git rev-parse --short HEAD

      - name: Ensure tools (zip, awscli, jq)
        run: |
          set -e
          if ! command -v aws >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y awscli
          fi
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get install -y jq
          fi
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get install -y zip
          fi
          aws --version

      - name: Configure AWS creds (env-based)
        run: |
          set -e
          echo "::add-mask::${AWS_ACCESS_KEY_ID}"
          echo "::add-mask::${AWS_SECRET_ACCESS_KEY}"
          aws sts get-caller-identity --region "$AWS_REGION"

      - name: Package artifact
        id: pkg
        run: |
          set -e
          ts=$(date +%Y%m%d%H%M%S)
          ART="app-${ts}.zip"
          # exclude VCS and workflows from bundle
          zip -r "$ART" . -x ".git/*" ".github/*"
          echo "artifact=$ART" >> "$GITHUB_OUTPUT"

      - name: Upload to S3
        id: upload
        run: |
          set -e
          ART="${{ steps.pkg.outputs.artifact }}"
          if [ -n "$S3_PREFIX" ]; then
            key="${S3_PREFIX%/}/$ART"
          else
            key="$ART"
          fi
          echo "S3 key: $key"
          aws s3 cp "$ART" "s3://$S3_BUCKET/$key" --region "$AWS_REGION"
          echo "s3key=$key" >> "$GITHUB_OUTPUT"

      - name: Create CodeDeploy deployment
        id: deploy
        run: |
          set -e
          cat > rev.json <<JSON
          {
            "revisionType": "S3",
            "s3Location": {
              "bucket": "${S3_BUCKET}",
              "key":     "${{ steps.upload.outputs.s3key }}",
              "bundleType": "zip"
            }
          }
          JSON
          DEPLOY_ID=$(aws deploy create-deployment \
            --application-name "$APP_NAME" \
            --deployment-group-name "$DG_NAME" \
            --revision file://rev.json \
            --query deploymentId --output text \
            --region "$AWS_REGION")
          echo "deployment_id=$DEPLOY_ID" >> "$GITHUB_OUTPUT"
          echo "Created: $DEPLOY_ID"

      - name: Wait for deployment to finish
        run: |
          set -e
          DEPLOY_ID="${{ steps.deploy.outputs.deployment_id }}"
          echo "Watching $DEPLOY_ID ..."
          # wait loop
          for i in {1..60}; do
            STATUS=$(aws deploy get-deployment \
              --deployment-id "$DEPLOY_ID" \
              --query 'deploymentInfo.status' --output text \
              --region "$AWS_REGION")
            echo "Status: $STATUS"
            if [ "$STATUS" = "Succeeded" ]; then exit 0; fi
            if [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Stopped" ]; then
              echo "Deployment $STATUS"
              aws deploy get-deployment \
                --deployment-id "$DEPLOY_ID" \
                --region "$AWS_REGION"
              exit 1
            fi
            sleep 10
          done
          echo "Timeout waiting for deployment"
          exit 1
